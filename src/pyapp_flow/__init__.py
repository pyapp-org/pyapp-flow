"""
Application Workflow
"""
from pathlib import Path
from tempfile import TemporaryDirectory
from typing import Callable

from .datastructures import WorkflowContext
from .functions import extract_inputs
from .steps import Variable, step, Step, set_var, ForEach, CaptureErrors, Conditional


class Workflow:
    """
    A workflow definition.
    """

    __slots__ = ("_nodes", "name", "description")

    def __init__(self, *nodes: Callable, name: str, description: str = None):
        self._nodes = list(nodes)
        self.name = name
        self.description = description

    def __call__(self, context: WorkflowContext):
        context.info("â—¾ Workflow: `%s`", self.name)
        with context:
            self._execute(context)

    def execute(self, context: WorkflowContext = None):
        """
        Execute workflow
        """
        context = context or WorkflowContext()
        context.log.info("ðŸŸ© Workflow: `%s`", self.name)
        self._execute(context)

    def _execute(self, context: WorkflowContext):
        for node in self._nodes:
            node(context)

    def nodes(self, *nodes: Callable) -> "Workflow":
        """
        Add additional node(s)
        """
        self._nodes.extend(nodes)
        return self

    node = nodes

    def set_vars(self, **kwargs) -> "Workflow":
        """
        Set variables to a particular value
        """
        self._nodes.append(set_var(**kwargs))
        return self

    set_var = set_vars

    def nested(self, *nodes: Callable) -> "Workflow":
        """
        Execute nodes in a nested scope
        """
        self._nodes.append(Workflow(*nodes))
        return self

    def foreach(self, target_var: str, in_var: str, *nodes: Callable) -> "Workflow":
        """
        Iterate through a sequence variable assigning each value to the target variable
        before executing the specified steps.
        """
        self._nodes.append(ForEach(target_var, in_var, *nodes))
        return self

    def capture_errors(
        self, target_var: str, *nodes: Callable, try_all: bool = False
    ) -> "Workflow":
        """
        Capture an errors generated by a step and append to specified variable (this is
        created if not found as a list).

        :param target_var: Name of a list variable to append error to (this is created if not found)
        :param nodes: Nodes to execute
        :param try_all: Every step is tried even if an error is raised in an earlier step
        """
        self._nodes.append(CaptureErrors(target_var, *nodes, try_all=try_all))
        return self


class TempWorkspaceWorkflow(Workflow):
    """
    A workflow that provides and cleans up a temporary workspace
    """

    __slots__ = ("path_variable",)

    def __init__(
        self,
        *nodes: Callable,
        name: str = None,
        description: str = None,
        path_variable: str = "workspace"
    ):
        super().__init__(*nodes, name=name, description=description)
        self.path_variable = path_variable

    def _execute(self, context: WorkflowContext):
        with TemporaryDirectory() as temp_dir:
            context.state[self.path_variable] = Path(temp_dir)
            context.info("Created temp workspace at: %s", temp_dir)
            super()._execute(context)
